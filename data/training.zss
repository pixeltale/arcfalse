# Mugen style Training Mode global code
# maps set via Pause Menu (menu.lua)
# _iksys_trainingDummyControl: 0 - cooperative, 1 - ai, 2 - manual
# _iksys_trainingGuardMode: 0 - none, 1 - all, 2 - instant, 3 - pushblock
# _iksys_trainingDummyMode: 0 - stand, 1 - crouch, 2 - jump, 3 - wjump
# _iksys_trainingDistance: 0 - any, 1 - close, 2 - medium, 3 - far
# _iksys_trainingButtonJam: 0 - none, 1-9 - a/b/c/x/y/z/s/d/w

#===============================================================================
# Functions
#===============================================================================
[Function fTrainingRecovery(pid)]
if playerId($pid),ctrl = 0 {
	mapSet{map: "_iksys_trainingDummyCounter"; value: 0; redirectId: playerId($pid),id}
} else if playerId($pid),map(_iksys_trainingDummyCounter) >= 60 && map(_iksys_trainingRegen) != 2 {
	lifeSet{value: playerId($pid),lifeMax; redirectId: playerId($pid),id}
	mapSet{map: "_iksys_trainingDummyCounter"; value: 0; redirectId: playerId($pid),id}
} else {
	mapAdd{map: "_iksys_trainingDummyCounter"; value: 1; redirectId: playerId($pid),id}
}

#===============================================================================
# Global states (not halted by Pause/SuperPause, no helper limitations)
#===============================================================================
[StateDef -4]

# Buffer Option - After Guard
ignorehitpause if map(_iksys_trainingPunish) = 1 && (stateno = [120, 155] || prevstateno = [120, 155] || stateno = 140) && ctrl = 1{
	if map(_iksys_trainingButtonJam) = 1 {
		assertInput{flag: a}
	} else if map(_iksys_trainingButtonJam) = 2 {
		assertInput{flag: b}
	} else if map(_iksys_trainingButtonJam) = 3 {
		assertInput{flag: c}
	} else if map(_iksys_trainingButtonJam) = 4 {
		assertInput{flag: x}
	} else if map(_iksys_trainingButtonJam) = 5 {
		assertInput{flag: y}
	} else if map(_iksys_trainingButtonJam) = 6 {
		assertInput{flag: z}
	} else if map(_iksys_trainingButtonJam) = 7 {
		assertInput{flag: s}
	} else if map(_iksys_trainingButtonJam) = 8 {
		assertInput{flag: d}
	} else if map(_iksys_trainingButtonJam) = 9 {
		assertInput{flag: w}
	}
} 

# Buffer Option - After Recovery
if map(_iksys_trainingPunish) = 2 && (prevstateno = 5201 || stateno = 5210 && ctrl = 1){
	if map(_iksys_trainingButtonJam) = 1 {
		assertInput{flag: a}
	} else if map(_iksys_trainingButtonJam) = 2 {
		assertInput{flag: b}
	} else if map(_iksys_trainingButtonJam) = 3 {
		assertInput{flag: c}
	} else if map(_iksys_trainingButtonJam) = 4 {
		assertInput{flag: x}
	} else if map(_iksys_trainingButtonJam) = 5 {
		assertInput{flag: y}
	} else if map(_iksys_trainingButtonJam) = 6 {
		assertInput{flag: z}
	} else if map(_iksys_trainingButtonJam) = 7 {
		assertInput{flag: s}
	} else if map(_iksys_trainingButtonJam) = 8 {
		assertInput{flag: d}
	} else if map(_iksys_trainingButtonJam) = 9 {
		assertInput{flag: w}
	}
} 

# Buffer Option - After Wakeup
if map(_iksys_trainingPunish) = 3 && prevstateno = 5120 && ctrl = 1{
	if map(_iksys_trainingButtonJam) = 1 {
		assertInput{flag: a}
		
	} else if map(_iksys_trainingButtonJam) = 2 {
		assertInput{flag: b}
		
	} else if map(_iksys_trainingButtonJam) = 3 {
		assertInput{flag: c}
		
	} else if map(_iksys_trainingButtonJam) = 4 {
		assertInput{flag: x}
		
	} else if map(_iksys_trainingButtonJam) = 5 {
		assertInput{flag: y}
		
	} else if map(_iksys_trainingButtonJam) = 6 {
		assertInput{flag: z}
		
	} else if map(_iksys_trainingButtonJam) = 7 {
		assertInput{flag: s}
		
	} else if map(_iksys_trainingButtonJam) = 8 {
		assertInput{flag: d}
		
	} else if map(_iksys_trainingButtonJam) = 9 {
		assertInput{flag: w}
		
	}
} 

# Buffer Option - After Any
if map(_iksys_trainingPunish) = 4 && ((prevstateno = [120, 155] && ctrl = 1)
|| (prevstateno = 5120 && ctrl = 1) || (prevstateno = 5201 || stateno = 5210)) {
	if map(_iksys_trainingButtonJam) = 1 {
		assertInput{flag: a}
	} else if map(_iksys_trainingButtonJam) = 2 {
		assertInput{flag: b}
	} else if map(_iksys_trainingButtonJam) = 3 {
		assertInput{flag: c}
	} else if map(_iksys_trainingButtonJam) = 4 {
		assertInput{flag: x}
	} else if map(_iksys_trainingButtonJam) = 5 {
		assertInput{flag: y}
	} else if map(_iksys_trainingButtonJam) = 6 {
		assertInput{flag: z}
	} else if map(_iksys_trainingButtonJam) = 7 {
		assertInput{flag: s}
	} else if map(_iksys_trainingButtonJam) = 8 {
		assertInput{flag: d}
	} else if map(_iksys_trainingButtonJam) = 9 {
		assertInput{flag: w}
	}
} 

if gameMode != "training" || isHelper || teamSide != 2 {
	# Do nothing, not training more or statedef executed by helper or not P2
} else if roundState = 0 {
	# Round start reset
	powerSet{value: powerMax}
	powerSet{value: playerId(getPlayerId(1)),powerMax; redirectId: playerId(getPlayerId(1)),id}
	mapSet{map: "_iksys_trainingDummyCounter"; value: 0}
	mapSet{map: "_iksys_trainingDirection"; value: 0}
	mapSet{map: "_iksys_trainingAirJumpNum"; value: 0}
} else if roundState = 2 {
	ignoreHitPause{
		assertSpecial{flag: noko}
	}
	# Life and Power recovery
	call fTrainingRecovery(getPlayerId(1));
	call fTrainingRecovery(getPlayerId(2));
	let n = playerId(getPlayerId(1)),numPartner;
	if $n >= 1 {
		call fTrainingRecovery(getPlayerId(3));
		if $n >= 2 {
			call fTrainingRecovery(getPlayerId(5));
			if $n >= 3 {
				call fTrainingRecovery(getPlayerId(7));
			}
		}
	}

	# Dummy Control: Cooperative
	if aiLevel = 0 && map(_iksys_trainingDummyControl) = 0 {
		# Guard mode: Auto
		if map(_iksys_trainingGuardMode) = 1 {
			assertSpecial{flag: autoguard}
		}

		# Fall Recovery
		if map(_iksys_trainingFallRecovery) = 0 {
			} else {
				if map(_iksys_trainingFallRecovery) = 1 && movetype = H {
					if facing = 1 {
						assertInput{flag: L}
					} else {
						assertInput{flag: R}
					}
				# if dummy should move backward and player is not trying to move dummy forward
				} else if map(_iksys_trainingFallRecovery) = 2 && movetype = H {
					if facing = 1 {
						assertInput{flag: R}
					} else {
						assertInput{flag: L}
					}
				}
			}

		
		# Hold Direction
		if map(_iksys_trainingHoldDir) != 0 && map(_iksys_trainingPunish) && ((prevstateno = [120, 155] && ctrl = 1)
		|| (prevstateno = 5120) || (prevstateno = 5201 || stateno = 5210)) && 
		!(stateno = 20 && time >= 10) {
			# Forward
			if map(_iksys_trainingHoldDir) = 1{
				if facing = 1 {
					assertInput{flag: R}
				} else {
					assertInput{flag: L}
				}
			# Down
			} else if map(_iksys_trainingHoldDir) = 2 {
				assertInput{flag: D}
			# Backward
			} else if map(_iksys_trainingHoldDir) = 3 {
				if facing = 1 {
					assertInput{flag: L}
				} else {
					assertInput{flag: R}
				}
			}
		}
		# if map(_iksys_trainingDirection) != 0 {
		# 	# if adjusting position is no longer needed
		# 	if $dir = 0 {
		# 		# maintain assertion only if dummy and nearest P1 are moving in the same direction
		# 		if vel x * enemyNear,vel x >= 0 || enemyNear,backEdgeBodyDist = 0 {
		# 			mapSet{map: "_iksys_trainingDirection"; value: 0}
		# 		}
		# 	}
		# 	# if dummy should move forward and player is not trying to move dummy back
		# 	if map(_iksys_trainingDirection) = 1 && command != "holdback" {
		# 		if facing = 1 {
		# 			assertInput{flag: R}
		# 		} else {
		# 			assertInput{flag: L}
		# 		}
		# 	# if dummy should move backward and player is not trying to move dummy forward
		# 	} else if map(_iksys_trainingDirection) = -1 && command != "holdfwd" {
		# 		if facing = 1 {
		# 			assertInput{flag: L}
		# 		} else {
		# 			assertInput{flag: R}
		# 		}
		# 	}
		# } 
		else {
			# Dummy mode: Crouch
			if map(_iksys_trainingDummyMode) = 1 {
				assertInput{flag: D}
			# Dummy mode: Jump
			} else if map(_iksys_trainingDummyMode) = 2 {
				if stateNo = const(StateStand) || vel y <= 0 {
					assertInput{flag: U}
				}
			# Dummy mode: W Jump
			} else if map(_iksys_trainingDummyMode) = 3 {
				if map(_iksys_trainingAirJumpNum) = 0 {
					if stateNo = const(StateStand) || vel y <= 0 {
						assertInput{flag: U}
					} else { # 1 frame delay before another assertInput is used to register double jump
						mapSet{map: "_iksys_trainingAirJumpNum"; value: 1}
					}
				} else if map(_iksys_trainingAirJumpNum) >= const(movement.airjump.num) && stateNo = const(StateJumpUp) {
					mapAdd{map: "_iksys_trainingAirJumpNum"; value: 1}
					assertInput{flag: U}
				} else if stateNo = const(StateStand) {
					mapSet{map: "_iksys_trainingAirJumpNum"; value: 0}
				}
			}
			# # Button jam
			# if map(_iksys_trainingDummyMode) > 0 && stateNo = const(StateStand) {
			# 	mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# }
			# if map(_iksys_trainingButtonJam) > 0 && ctrl && command != "holdback" && command != "holdfwd" {
			# 	if map(_iksys_trainingButtonJamDelay) > 0 {
			# 		mapAdd{map: "_iksys_trainingButtonJamDelay"; value: -1}
			# 	} else if map(_iksys_trainingButtonJam) = 1 {
			# 		assertInput{flag: a}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 2 {
			# 		assertInput{flag: b}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 3 {
			# 		assertInput{flag: c}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 4 {
			# 		assertInput{flag: x}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 5 {
			# 		assertInput{flag: y}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 6 {
			# 		assertInput{flag: z}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 7 {
			# 		assertInput{flag: s}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 8 {
			# 		assertInput{flag: d}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	} else if map(_iksys_trainingButtonJam) = 9 {
			# 		assertInput{flag: w}
			# 		mapSet{map: "_iksys_trainingButtonJamDelay"; value: 1}
			# 	}
			# }
		}
	}
}
